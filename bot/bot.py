import asyncio
import logging

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message

from config import config


bot = Bot(token=config.bot_token.get_secret_value())

dp = Dispatcher()


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    This handler receives messages with `/start` command
    """
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç! –¢—ã –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å —Å—é–¥–∞ –ø–æ—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ @{config.channel} \
          –ñ–¥—É —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π! ‚úçÔ∏è'
    )


@dp.message(F.photo | F.text)
async def text_and_photo_message_handler(message: Message) -> None:
    """
    This handler will forward receive a text message to the Admin
    """
    try:
        await bot.send_message(
            chat_id=config.admin_id,
            text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name}:'
        )
        await message.send_copy(chat_id=config.admin_id)
    except TypeError as error:
        logging.ERROR(f'An error has occurred: {error}')


@dp.message(F.video | F.sticker | F.file)
async def unsupported_type_message_handler(message: Message) -> None:
    """
    This handler will send a notification that the message type is unsupported
    """
    await message.answer(
        '–ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. \
         –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. üôè'
    )


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
